// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  // No sessions[] field, since weâ€™re not using database-backed sessions

  conversations Conversation[]
}

model Conversation {
  id             String    @id @default(cuid())
  title          String //auto generated title or user-defined title
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  userId         String
  user           User     @relation(fields: [userId], references: [id])

  message        Message[]
}

model Message {
  id             String        @id @default(cuid())
  role           ROLE
  content        String        @db.Text //ai generated response or human prompt

  conversationId String        
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  Job            Job?
}

model Job {
  id            String      @id @default(cuid())
  status        STATUS      @default(pending)
  script        String?     @db.Text  //Manim script
  videoUrl      String?     
  error         String?   @db.Text // Error message if status is 'failed'
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  messageId     String?      @unique
  message       Message?     @relation(fields: [messageId], references: [id])
}


model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}


enum ROLE {
  user
  assistant
}

enum STATUS {
  pending
  processing
  complete
}